// Code generated by go-bindata.
// sources:
// templates/Dockerfile.template
// templates/Makefile.template
// templates/actions/action_x.template
// templates/actions/action_x_run.template
// templates/cmd/main.template
// templates/connection/cache.template
// templates/connection/connect.template
// templates/connection/connection.template
// templates/connection/connection_key.template
// templates/server/http/handler_x.template
// templates/server/http/server.template
// templates/triggers/trigger_x.template
// templates/triggers/trigger_x_run.template
// templates/types/type_x.template
// templates/types/types.template
// templates/vendor/.gitkeep
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesDockerfileTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8f\x4f\x4f\xc3\x20\x18\xc6\xef\x7c\x8a\x37\xbb\x17\x9c\x89\x17\x93\x1e\x66\x8a\xa6\x71\x83\x86\xd4\xa9\x31\x1e\xb0\x45\x42\x18\xd0\xd0\x7a\x98\x0d\xdf\xdd\x2c\xa5\x27\xf5\xc8\xc3\xf3\xe7\xf7\xde\x0b\x7e\x00\x1b\x9c\xf4\x3d\xd1\xa1\x18\x4e\x5f\xda\xf8\xdb\x2b\x7c\x0d\x68\xbf\xbb\xa3\x7b\x08\x51\x4b\x6f\xbe\xe5\x64\x82\x2f\x17\x63\xfe\x19\x7b\x5b\xea\x90\x1f\xd3\x79\x50\xe5\x92\x46\x88\xb2\x23\x3c\xf0\xed\xcd\x91\xb2\x8a\x0b\xfa\xd2\x50\x51\x1f\x28\x6b\xcb\x2d\x42\xe2\x89\x81\xb3\xbd\x89\x50\x0c\x40\xf2\xf2\x12\x1c\xc9\x87\xf1\x68\x57\x55\x80\x81\xe8\x40\xc6\xd8\x91\x79\x06\xdc\xc8\xce\x4a\xad\x44\x08\x13\xa4\x84\x9e\xb9\x78\xac\x6a\xf1\x9f\x25\x25\xb4\x74\xe4\x56\x3c\x0e\xaa\xc3\x67\xe9\x4e\xf0\x4b\xc9\x38\xd2\x2a\x58\xd9\x2f\x42\x74\x50\xc4\xcf\x75\xe0\x72\x4f\x2b\x5e\x1b\x5e\xb3\x16\xde\x36\x7f\x30\x93\x79\xc6\x4c\x3a\x95\xd2\xe6\x1d\xfd\x04\x00\x00\xff\xff\xc4\x7a\x21\x4f\x52\x01\x00\x00")

func templatesDockerfileTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesDockerfileTemplate,
		"templates/Dockerfile.template",
	)
}

func templatesDockerfileTemplate() (*asset, error) {
	bytes, err := templatesDockerfileTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Dockerfile.template", size: 338, mode: os.FileMode(420), modTime: time.Unix(1488814111, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesMakefileTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x6d\x6f\xdb\x36\x10\xfe\x2c\xfe\x8a\xab\x67\xd8\x56\x10\x8a\x71\xb0\x6e\x80\xb6\xbc\x14\x71\x90\x16\xc5\x6c\x23\x49\x5b\x0c\xd3\x5a\x30\x12\x2d\x11\x96\x48\x81\xa2\x9c\x25\x71\xfe\xfb\x40\xea\xc5\x76\xec\xb8\xfd\xb0\x7d\x09\xe2\xbb\xe3\xdd\xf3\xdc\x3d\x3c\xea\xf3\xe5\xf5\xcd\x87\xc9\xf8\xec\xa4\x3b\x28\x12\x96\xa6\x10\x2b\x96\x43\xff\xeb\x82\xa9\x82\x4b\xe1\x43\x1f\xf2\xb4\x8c\xb9\xf0\x8a\x9c\x85\xde\x03\xcd\x52\x58\x42\xc1\x22\xe8\x17\xa4\x0d\x22\xa4\xef\xa2\xf1\xbb\x3f\x2e\xb7\xf2\x08\x9a\xb1\xfd\x49\xaa\x08\x9b\xe1\x72\x7c\x31\x19\x7d\x18\x5f\xf9\x6d\x96\x3b\x5a\xb0\x5f\x7e\x06\x1e\x4a\xe1\xe5\x22\x86\xe3\x53\x12\xb1\x05\x11\x65\xba\xca\xb0\x24\xcb\x20\x20\xcb\xb8\x0f\x4b\xd0\x0a\x70\x04\xfd\x40\xf4\x5d\xf4\xf9\x72\x3c\x9a\x5c\xef\x60\x26\x22\xa9\xbe\x47\xac\x8a\xb1\xa8\x2e\xbe\x8c\xce\x36\x00\x19\xc4\xd0\x1d\x4c\xbf\x8c\x5c\x17\x7d\xdb\xa4\xcd\xc2\x44\x42\x77\x60\x8c\x2e\x2c\x81\xde\xcf\xa1\xff\x04\xb9\xe2\x42\x83\x96\x65\x9e\x33\x35\x28\xca\xbb\x42\xab\x41\xb7\x7b\x74\x38\x3c\x1c\xba\x2e\x68\x99\xca\xfb\x4d\xc7\xb1\xeb\xc2\x73\xdf\x45\x68\xfa\xf1\xea\xa4\x3b\xa8\xb8\xb8\xb8\xce\x8c\x8d\xc5\x0e\xce\xf5\x34\x55\x5e\xfc\x88\xd0\xe8\xe6\xf6\xec\x84\xcc\x65\x46\x45\x44\x2a\x6a\x05\xb9\xe3\x02\xa1\xeb\xcb\xe9\xe4\xe4\xe9\x09\xbc\x29\x0d\xe7\x34\x66\xd7\x52\x6a\x78\x7e\x46\x7c\x26\x22\x36\x03\xe3\x46\x8e\x0d\xaa\xd3\x23\x26\x22\x3e\x43\x88\xa6\xa9\x6f\x7b\x0f\x3c\xa3\x31\x83\xbc\x3a\x0f\xaa\x14\x82\x29\x84\xaa\x2a\x3e\x70\x51\x68\x9a\xa6\x08\xdd\x95\x3c\x8d\x7c\xe4\x9c\xdb\x36\x74\x3e\x15\x5c\xc4\xa0\x58\x6e\x5a\x62\x0a\xb8\x1d\xe4\x68\x56\x68\x33\xa4\xee\xe0\x6a\x32\x7d\x77\xfb\xde\x25\x85\x0a\x49\xed\x87\xe5\x12\x52\x01\xb8\xa8\xfb\xfb\x4a\x14\x72\xb2\x79\xc4\x15\xe0\x1c\x0c\x43\x27\x96\x60\x4b\x03\x96\xc6\x40\x9a\x01\xec\x3c\x4d\xc2\x2c\x22\x19\xe5\xc2\x8b\x25\x42\x35\x76\xbf\x4a\x80\x9c\x30\x07\xac\x5e\x24\x19\xdd\xdc\xba\x08\x99\x46\x18\x6e\x15\x81\xd9\x4a\x94\xbd\x1e\x04\xc8\x31\xd2\xc1\xdc\xbb\x2b\xa1\x43\xbe\x1a\x1f\x29\x48\x30\xb0\x87\x20\x70\xbd\x03\x12\x0c\x83\x4e\x44\x35\xf5\x6d\x33\x03\x92\x8b\xf8\xb7\x4a\xdf\x87\xdd\x41\x23\x7d\x37\xe8\x90\xce\x0e\x65\x1a\x69\x97\x0c\x39\xe7\x2a\x33\xb5\x0f\x4c\x9d\xc6\x88\xea\xb9\xf8\xc8\x31\x5e\x35\x33\xcd\xfb\x78\xe5\x22\x47\x53\x05\x38\x5c\x3c\x36\x16\xc0\x98\xfd\x13\xa6\x65\xc4\x4e\x6a\xc3\x01\x42\x16\x8e\x8f\x9c\x48\x86\x73\xa6\x9a\x46\xe2\xdc\xdc\x31\xac\xa1\x15\x5f\xd3\x10\x7f\x25\x3e\xf0\xda\x63\x9a\xc6\xfb\x43\xb7\x9d\x29\x35\xad\x44\x48\xb1\x98\x09\xa6\xa8\x66\xad\x74\xae\x2a\x83\x91\x8f\x60\xf7\x75\x3f\xa0\x98\xb3\x94\x69\x29\xda\x21\x44\xe0\x79\xed\x9c\x96\x4b\xc8\x16\xa6\x39\xd6\x76\x61\xd4\xb3\xf2\x22\xe7\xfc\x3e\xe1\x61\x02\xd5\x05\x81\xe1\xda\x22\xe9\xf5\x1a\x6b\x5d\xa7\x81\x03\xb1\xdc\x1e\x05\xc6\x39\xd5\x4d\x1e\x9d\xe5\x6b\xb3\xb1\xd0\x27\x0b\xa6\x52\xfa\x60\xa0\xbf\x80\x0d\x5a\x82\x4e\x18\x84\xa5\x52\x4c\x68\x88\xb8\x62\xa1\x96\xea\x61\x8d\xcf\x2a\x6d\xaf\x07\x11\x9f\xcd\x00\x97\x63\xb5\x4e\xb3\x8d\x20\x70\xda\x6c\x1a\xcf\x46\xae\x80\x34\x12\xdd\x70\xf7\x7a\x90\x53\x1d\x26\xe6\x76\xe1\x7c\x08\xbf\xbf\x76\xba\x91\x98\x54\x3c\x86\x83\xca\x7b\xe0\xc5\x8f\x5b\x05\x5e\xc0\xad\xc5\xb7\xdd\x19\x54\x2d\x0c\xbf\x29\x88\x55\x29\x1a\x23\x4e\xb4\xce\x37\x3c\xd6\xd2\xba\xb5\xe2\x71\xfc\xe2\x6c\x63\x44\x68\xcd\x68\xb4\x63\xf7\xec\x0c\x3a\x3f\xbd\x31\x9b\x8f\x14\x49\x20\x6a\x79\xaa\x52\x00\xc6\x06\x21\xdf\x2f\x53\x4c\x43\xcd\xa5\x80\xa0\xdb\x3d\xef\xc0\x29\xb4\x8d\xb7\xa0\x9d\xf3\x30\xc9\x64\x04\xbf\xbe\x7d\xbb\xe5\xa9\x76\xde\x5f\xf8\x6f\xf8\x54\xb0\x4d\x2f\x60\x9c\xb0\x34\x37\x02\x30\xbf\x8c\x08\x6a\x5d\x75\x36\x38\x54\xcd\xf8\x41\x22\x39\x0c\x8f\x8e\x8e\x86\xf8\xd8\xfc\xf5\xed\xff\xdf\x67\x67\x0a\x6c\xd1\xaa\x3a\xfe\x2a\xb7\xc6\xbd\x87\xa0\x0d\xf9\x61\x96\xcd\x4c\xff\xa3\x89\xd5\xe9\x76\x8f\xac\xd5\xca\xeb\xf4\x56\x11\xfb\x18\x36\x55\xf6\x91\x34\x9e\xf5\x27\xc2\xf3\x88\x96\x32\x2d\x88\x71\x78\xf9\x83\xb9\x11\x55\x8d\x8b\x84\x85\x73\x30\x5b\x05\x4c\x04\x08\xa9\x81\x0b\xbb\x9a\x23\xe0\x02\xc2\xb2\xd0\x32\x63\xaa\x79\x5b\x8b\x37\x9d\x7d\x79\xcd\xdd\x7e\xd0\x89\x14\xc7\xdb\x3e\x8f\xbc\xdc\x61\x08\x2d\x68\xca\xa3\x7a\xe1\x6e\x25\x0d\x0d\xb6\x6f\x36\xfa\x7f\x80\xbc\x99\x7d\x17\xf0\xcd\x88\x5d\xf0\xbd\xe9\xfb\xc9\xf8\x4f\x1f\xa8\xf9\x22\xb3\xef\x55\xf3\x69\x52\x7f\xa8\x54\x8b\x77\xf5\xb0\xa0\x7f\x03\x00\x00\xff\xff\x7e\x06\x1e\xdd\xe8\x0a\x00\x00")

func templatesMakefileTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesMakefileTemplate,
		"templates/Makefile.template",
	)
}

func templatesMakefileTemplate() (*asset, error) {
	bytes, err := templatesMakefileTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/Makefile.template", size: 2792, mode: os.FileMode(420), modTime: time.Unix(1489608809, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesActionsAction_xTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x92\x4f\x4b\x03\x31\x10\xc5\xef\xf9\x14\x8f\xb0\x07\x05\xdd\xbd\x17\x3c\x78\xf4\x52\xa5\xf8\x01\x1a\xb6\xd3\x1a\x65\x93\x90\xcc\x22\x12\xf2\xdd\x25\x7f\xba\x94\xae\xa0\x17\x8f\x2f\xf9\xbd\x99\xf7\x60\x9c\x1a\x3f\xd4\x89\xa0\x46\xd6\xd6\x04\x21\xf4\xe4\xac\x67\xdc\x08\x00\x88\xf1\x1e\xfa\x88\x7e\x4b\x74\x08\xaf\x7a\x22\xa4\x54\x3e\x24\xeb\x89\xe4\xc2\x90\x39\xe4\x9f\x1f\x3c\x5f\x8e\xc2\x62\x8a\x11\xfd\x4b\x5d\xb8\xb3\x96\x91\xd2\xc0\x19\x58\x0d\xba\x15\x62\x18\x90\xf1\xad\x2a\x4b\x9f\x8c\x9b\x19\x3a\x80\xdf\x08\xba\x88\xa3\xf5\x97\x84\xc8\x93\xd6\x96\xc0\x7e\x1e\x19\x71\xd9\xe0\x95\x39\x11\x3a\x83\x3b\x74\x0e\x9b\x07\xf4\x05\x6c\x11\x63\x44\xe7\xce\x13\x9a\xca\x1d\xb2\xda\xbf\x07\x6b\x36\xb2\x3e\xee\xd4\x67\xa3\xe4\xfe\x3a\x7d\xba\x4e\xff\x3c\xf3\x45\x7c\x5b\xd5\x6f\xf9\x9b\xe9\x0f\x05\x2a\xf9\xaf\x0d\x1e\xcb\x79\xe4\x06\xca\xb4\x5b\x59\x05\x6e\xcc\x39\x70\xfa\x0e\x00\x00\xff\xff\x7b\x15\x7c\x4c\x5b\x02\x00\x00")

func templatesActionsAction_xTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesActionsAction_xTemplate,
		"templates/actions/action_x.template",
	)
}

func templatesActionsAction_xTemplate() (*asset, error) {
	bytes, err := templatesActionsAction_xTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/actions/action_x.template", size: 603, mode: os.FileMode(420), modTime: time.Unix(1489629168, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesActionsAction_x_runTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x52\x4d\x6b\xdc\x30\x10\xbd\xfb\x57\x3c\xf6\x50\xec\x65\x63\x87\x1e\x03\x29\x84\x9c\x02\x69\x52\x42\x29\x84\xd2\x83\x6a\x8f\xbd\x62\x65\x8d\xd1\xc7\x86\xb0\xf8\xbf\x17\x49\xf6\x7e\x64\xa1\x3d\xe5\x52\xe2\x83\x99\x8f\xa7\xd1\xd3\x7b\x33\x88\x7a\x23\x3a\x82\xa8\x9d\x64\x6d\xb3\x4c\xf6\x03\x1b\x87\x3c\x03\x80\xc5\x6e\x87\xf2\x5b\x82\x3c\x31\x3b\x8c\x63\x55\xb3\xd6\x14\xd1\x8b\x84\xe9\xa4\x5b\xfb\xdf\x65\xcd\x7d\xb5\xe1\x5e\xe8\xa6\x1a\x94\xef\xa4\xbe\xb0\xcd\xe6\xa2\xe3\xcf\x95\xe2\x6e\x91\x15\x59\x56\x55\xf8\x21\x94\x6c\x84\x23\xbc\x48\xa5\xb0\x9d\x33\xb7\x26\x48\x3d\x78\x07\x69\x31\x18\x1e\xc8\xa8\x57\x58\x72\x7e\x28\xb3\xd6\xeb\x1a\xb9\xc4\x32\x90\x79\x10\x3d\x61\x1c\xef\x02\xb8\xd8\x8f\xcb\x0b\xfc\xfc\x45\xc6\xb0\xc1\x2e\x92\x8a\xb1\xc5\xd5\x35\x7a\xb1\xa1\x7c\x6a\xae\x70\x59\xc4\x76\xfc\x55\x15\x6e\xbd\x75\xdc\xcf\x3c\x24\x6b\xd4\xdc\x10\xd6\x64\x68\x86\xdc\x0c\x03\xe9\x66\x1e\x28\x2c\x34\x51\x43\x4d\x36\xf7\x0d\x39\x6f\x74\xcc\x64\x0b\x45\x3a\x4f\xd0\x02\x5f\x70\x39\xb1\x09\x5f\xc2\x4d\x73\x62\x75\xcc\x8e\xea\x5a\xaa\x6c\xfc\x97\x44\xec\xdd\x5f\x35\xe2\x13\x8d\x1e\x23\xfa\xff\x14\xe9\xc9\xeb\xa4\x8f\xf1\x3a\x4a\x93\xf6\x17\x2f\xd2\xad\x63\xde\xc9\x2d\xe9\x69\xa7\x78\x4b\xe6\xa8\x78\x58\xe0\x49\x36\x71\x22\xdb\x4d\x6c\x15\xe1\x8a\x3c\x40\xb1\x3c\x1c\x28\x6f\xf7\xe1\x6a\x1a\x7e\xb6\x95\x2b\x28\xee\xb0\x54\xdc\x95\xf7\xdc\x75\x64\x0a\xe4\xe7\xb6\xac\xd2\x23\x8b\xe9\xf1\x93\xb3\x57\xd7\xf8\x74\x06\xdd\x8d\xb3\x8c\xcf\xec\xcd\x91\xf8\x73\xf9\xab\xd8\x10\xac\x37\x04\xc7\x78\x7c\xb8\x7f\x86\xb7\x14\x58\x94\x77\xba\x65\x08\xdd\xec\x93\x36\x40\x02\x3f\xa1\x5f\x51\x27\x63\xc3\xc0\x37\x4e\xcd\x7c\xc2\x51\xcd\x89\x2a\x5a\x36\xb0\xbe\xae\xc9\xda\x37\x68\x2d\x55\x84\x1e\x70\xad\x90\xca\xcf\x14\x4f\x66\xae\x8e\x5c\xfc\x4e\xd6\x25\x1b\x5d\x88\xde\xc7\xc7\x70\xc9\x87\x91\xef\x66\xe4\x9f\x00\x00\x00\xff\xff\x9b\xe0\x22\x77\x41\x06\x00\x00")

func templatesActionsAction_x_runTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesActionsAction_x_runTemplate,
		"templates/actions/action_x_run.template",
	)
}

func templatesActionsAction_x_runTemplate() (*asset, error) {
	bytes, err := templatesActionsAction_x_runTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/actions/action_x_run.template", size: 1601, mode: os.FileMode(420), modTime: time.Unix(1489614095, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCmdMainTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5f\x6f\xdc\xb8\x11\x7f\x96\x3e\xc5\x54\x48\x1b\x6d\x21\x6b\x7b\x79\x4c\x60\x14\x69\x72\xc1\x05\x70\x13\xc3\xf6\x5d\x51\x04\x79\xe0\x8a\x23\x89\x5d\x8a\x23\x90\x94\xd5\xed\x62\xbf\x7b\x31\x24\xf7\x5f\x6c\xe3\x9c\x7b\x38\xe0\x9e\xbc\x22\x87\xc3\xf9\xfb\x9b\x1f\x3d\x8a\x66\x2d\x3a\x84\x41\x28\x93\xe7\x6a\x18\xc9\x7a\x28\xf3\xac\x40\xd3\x90\x54\xa6\x5b\xfe\xc7\x91\x29\xf2\xac\x68\x07\xcf\x7f\x34\x75\xfc\x87\x5c\x91\xe7\x59\xd1\x29\xdf\x4f\xab\xba\xa1\x61\xb9\xa6\x41\x18\xb9\x1c\xf5\xd4\x29\x73\xe1\xe4\xfa\xa2\xa3\x57\x4b\xa9\xdc\x28\x7c\xd3\xa3\x2d\x72\x00\x80\x51\x53\x07\xbf\x7e\x2c\xdd\xf2\xab\x72\x03\x3a\x27\x3a\x64\x5b\xb6\xdb\x0b\x50\x2d\xd4\x6f\x1b\xaf\xc8\x38\xd8\xed\xf2\xac\xd8\x6e\xa1\xbe\x8e\x2e\xde\x10\x79\xd8\xed\x96\x22\xee\x17\xf1\x04\x1a\xf9\xa4\x64\x43\xc6\x60\x90\x2e\x1e\x17\x70\x68\xef\xd1\x2e\x7b\xef\xc7\xe2\x68\xc0\x9d\x55\x5d\x87\xf6\x69\x0b\x7c\x12\x38\x37\x61\x91\xe7\xf7\xc2\x72\xec\x97\x4b\xf8\x24\x06\x84\xe8\x2b\x18\x31\x60\x9e\x85\x95\x4b\x08\xfa\xc2\xef\xdd\xae\x08\xa2\xbf\xa0\x91\x64\xf7\xc2\xf7\xe1\x2b\xcf\xd2\x6a\x3a\x90\xbe\x8e\x47\xac\x53\x64\x8e\x67\xc2\x67\xc8\xcf\x7e\xeb\x70\x30\x7e\xee\x4f\xbe\x47\xd7\x58\x35\xfa\x93\xd3\xf2\xb8\x14\x34\x9c\x8a\x24\x2d\xa7\x4b\xac\x69\x91\xe7\xed\x64\x9a\x50\x74\xe5\x02\xb6\x79\xa6\x5a\xd0\x68\x4a\x72\xf5\x5b\xdb\xb9\x05\x5c\x5e\xc2\xdf\x78\x3d\xd3\xd4\xd5\x1f\x84\x17\xba\x2c\xfe\x4d\x13\x0c\x93\xf3\x30\x5a\xba\x57\x12\x01\x95\xef\xd1\x82\xef\x11\x2e\x38\x07\x15\x5c\xc4\xe4\x56\x40\x16\x2e\x52\x98\xa1\xd5\xa2\x03\x4f\x60\x27\x03\x22\x59\x5d\x2c\xf2\x6c\x97\x67\x6e\x56\xbe\xe9\x21\x5d\xfb\xe5\x87\xaf\x7c\x67\x23\x1c\x42\x11\x34\x16\xaf\x81\x9d\x16\x38\x90\x51\xff\x43\x10\x0e\x78\x39\xcf\x32\x57\x01\x5a\x0b\xaf\x2f\xc3\x42\xfd\x09\xe7\xdb\x50\x0c\xe5\xb1\x68\x78\xf1\x9d\x68\x7a\x2c\x17\x8b\x3c\x63\x17\xf9\xc4\x9f\x2e\xc1\x28\x1d\x7c\x3b\x71\x0e\xad\x65\x99\x5d\x9e\x65\xed\xe0\xeb\x6b\xab\x8c\xd7\xa6\x2c\xae\x63\x8c\x4f\x92\x0e\x2b\x22\xaf\x4c\x07\x3f\xdd\xdd\x5d\x27\xd3\xea\xba\x66\x87\x38\x41\x77\xbd\x72\x30\x2b\xad\x61\xa5\xa9\x59\xc3\x64\xbc\xd2\x21\x44\xb1\x58\xc1\xf5\x93\x77\x20\x69\x36\x47\x9b\x5e\x5f\x82\xab\xaf\x94\xf3\x68\xde\x1a\x19\x1c\x29\x17\x6f\x9e\x65\x6e\x0a\x56\x8c\x7b\x0c\xd7\x4d\x88\xb3\x53\xa6\xd3\x08\x71\x83\x03\x27\xb1\x55\x06\x25\xac\x36\xfb\xc5\x51\x58\x31\x38\xa0\x60\x96\x97\x8a\x2d\x1a\x48\x62\x05\xa9\xad\x0f\x31\xee\xd0\x73\x82\x3e\x58\x1a\xde\x5d\x7d\x2c\xbf\x27\x9c\xfb\x98\x28\x07\x64\x10\x84\x91\x20\xc9\x60\x05\xca\xc3\x4c\xe6\xa5\x07\x79\x48\xef\x32\x06\xed\x2c\x30\x76\x32\x9f\x0d\x7e\x6e\xdb\x88\x2b\xe5\x99\x81\xcf\x0b\x12\x77\x45\x8a\x53\xaa\xc9\x47\xea\x6a\x4c\x95\x3c\x92\xd6\x9c\xde\x7d\xf5\xfe\xae\x41\x7a\xb4\x70\xf6\x96\x3c\x51\x39\x76\x32\x09\xf1\xa2\x3f\xbf\x25\x42\xd9\x2e\xdf\x25\x4c\xf8\xd6\x0b\x28\x9d\xb7\xca\x74\x15\xfc\x35\xa9\xac\x7f\xf9\x21\xf8\x4c\x36\x40\x87\xc4\x86\xcd\xe0\x31\xc5\x1d\xf7\x1e\x1b\x92\x68\x19\x4a\x6e\x39\x5c\x8b\x3c\x1b\x78\xff\x2f\xc7\xd3\xdb\x5d\x7e\x62\xbf\xc4\xa6\x8e\x87\xca\xe1\xa1\xb5\x16\xfd\x64\x0d\x14\x45\xc5\x4b\xe1\xde\x80\x1c\x69\x7d\x8f\x1c\xaf\xbe\x56\x30\x04\x91\x83\x23\x8f\x15\x0e\xec\x7d\x19\x4e\xbd\x59\x44\x6f\xf8\xbe\xc7\x86\x58\x23\x83\xfd\x27\xc0\xf2\xee\xf0\xf3\xbd\xf0\x82\xdd\xd1\x2c\xc2\xb3\x95\x43\x70\x45\x9c\x0d\x2e\x80\x70\xf2\x38\x82\x39\xa8\x37\x62\x2e\x87\xfa\x1f\x24\x37\xf5\xfb\xc3\x06\x8b\x62\x8b\x16\x74\xfd\x41\x4f\xae\x4f\xd1\x8b\xf9\x39\xc0\x64\x3a\x16\x6d\xdb\x5b\x6b\x85\xe9\x10\x5e\x98\x0a\x5e\x8c\x7c\xdb\xb9\xe9\xa1\xea\xb7\x5b\x78\x31\xd6\x37\x62\xde\xcf\xad\xd7\xb1\xe4\x7e\x36\x83\xb0\xae\x17\xb1\xcc\x56\x24\x37\xa0\x8c\xa7\xf0\x65\x55\xd7\x7b\x0e\xd7\xd4\xf8\x28\xfd\x2f\x84\x86\x26\x2d\x41\xdc\x93\x92\x41\xe8\x15\xe0\x7f\x1b\x74\x2e\x24\x1f\xf6\xca\x1a\xa1\xb5\x03\x65\xa0\x47\x8b\x30\x2b\xdf\x83\x00\x4d\x1e\xa8\x85\xe8\xc9\x45\x23\x18\x9e\x80\x0c\xf8\xcd\x88\x2e\x5e\xb0\x9a\x3c\x9f\xf2\xdc\x08\x6c\x78\x15\xfb\x11\x6d\x4b\x76\x10\xa6\x41\xe8\x84\x32\x0c\x24\x86\x3c\xf8\x5e\x78\xe8\x2c\x0a\x5f\x05\x50\x51\xfe\xa5\x03\xcd\xc6\x74\x68\xd0\x0a\x4f\x16\xb8\xa8\x78\xf2\xf0\x9c\xf3\x22\xb4\xee\x72\xc9\x0b\x92\x18\x7e\xc2\x4d\xb3\xd8\xd4\xa9\x03\x3f\xbf\xff\xcc\xc9\x9f\x11\xdc\xe4\x46\x6c\x92\x84\x72\x20\x60\x45\xde\x6b\x34\xd8\xac\x2b\x9e\x7f\xad\xd2\xc8\x2a\xf8\x66\x37\x8b\x11\x56\xa2\x59\x43\x8a\xdd\xd1\x49\x04\x31\x8e\x96\x44\xd3\x73\xcb\x9a\x71\xf2\xa1\x94\x12\x05\xaa\x63\x62\x52\x56\x3e\xf2\x36\xd7\xd2\x49\x6f\x84\xa6\x3a\xa4\x69\x5f\x37\x41\xb2\x82\xa0\xef\x91\xfe\x4e\xad\x11\x3a\x25\x7b\x8e\xbe\x63\x39\x57\xd0\xc8\xe7\x68\xe4\x5e\x38\xe0\xde\xc3\xc6\x28\x1b\x59\x81\x7e\x02\x00\x1f\x28\x13\x4f\xc7\x24\xd6\x72\x08\x8a\x9d\xcc\x3f\xd1\xf7\x14\x5a\x4a\xd4\x37\x53\x42\xc1\xd0\xd6\x97\x97\x50\x78\x74\xbe\x48\x57\x1c\x64\x59\xf4\x0e\x9d\x4f\x57\x51\x75\x82\x9a\x51\xa4\x8c\xbe\xa8\x18\xd3\x67\x1b\xbd\x5c\x1e\xfa\x3a\xf6\x0b\xba\x49\xf3\x35\xb2\xbe\x45\x23\x4b\x5a\x9c\xf3\x5b\x89\xad\x98\xb4\x7f\x7d\x84\x34\xe6\x19\x3f\x32\xee\xb4\x65\x31\x99\xb5\xa1\xd9\xec\x07\xf3\x9f\x5d\x51\x9d\x77\x7b\xa4\x4b\x49\xe1\xee\x88\x7f\xdf\x00\xde\xc3\x41\xf0\x6c\xc4\x3b\x63\xcd\xbf\x0b\xe4\x7d\x27\xae\x9d\x1b\xf8\x34\xb0\x1d\xdb\x6c\xcf\xf3\xeb\x13\xfa\x96\xb4\xfc\x91\x9a\x2d\x62\xaf\x1a\x06\x94\x4a\x78\xd4\x1b\x68\x79\x46\x84\xb2\x3b\x66\x08\xf8\x61\xe7\x02\xae\x35\xc2\xc0\x0a\x01\x07\xe5\x3d\xca\x3d\x2a\x31\x2c\xa3\x65\x10\xe6\x2f\x31\x8e\x5a\x35\x22\xbc\x1a\x22\xfa\x25\x96\x21\x03\x27\x33\x88\x12\x96\x30\x39\x0c\xd2\xca\x78\xb4\x46\x68\x58\x4d\x6d\x8b\x16\x25\xdf\xc6\xd2\x7b\x78\xab\x02\x7a\x1f\xad\x71\xd0\x8b\xfb\x80\xbd\x33\xd9\x75\xbc\x41\x19\x46\xd1\x1e\x46\x2d\x1a\x74\x15\x1b\x3b\x23\x48\x14\x3a\x0e\x89\x08\xb6\xcc\x5d\xc9\xe0\x05\xb5\x2d\xb4\xc2\xf5\xec\x1a\x0f\x92\xef\x41\x9d\xc7\xa6\xe8\xb3\xba\x3a\xd4\xcd\xa1\x6c\x3e\xe1\x7c\x86\x46\x29\x44\xa5\x5c\x3c\x0d\x3d\x47\x84\xf1\x01\x78\x4e\xe1\x65\xf1\x86\x25\x54\x0b\x0f\x0c\x39\xb7\x24\x98\x12\x72\x42\x69\xd8\x72\x3a\x02\x29\xa5\xf0\xfc\x80\x69\x4c\xa0\x23\xa4\x26\x1a\xc3\x18\xfa\x96\x36\xa6\x6e\xe7\xf1\xd5\x90\x71\xd3\x80\x32\xa9\x6d\xc9\x02\x9b\x1c\x70\x61\x8e\x85\xb2\xaf\x92\x63\xe7\x82\x54\x16\x1b\xaf\xc3\x78\x3c\x85\xb5\xec\x14\x7c\x0e\x25\x7a\xeb\x85\xf5\x07\xab\x80\xcd\xca\xb3\xac\x23\xf0\x75\xd8\xba\x41\x21\xaf\x88\xc6\x32\x3d\x94\xf8\x95\xf2\x80\xee\x72\xf1\xd2\x30\x6a\xf4\xe8\x60\x19\x19\x6f\x22\xbc\xe9\x4e\xcf\xc8\x7f\x16\xd4\xdf\x82\xb3\x7b\x4a\xfd\xdd\x40\x7b\xf2\x9a\x19\x2d\x7a\xbf\x81\x5e\x34\xeb\x4d\x15\x28\x89\x9b\x2c\x32\x96\xfa\x40\x7c\x22\x6d\x40\xef\xd1\x32\xc9\x08\x0d\xd2\x5a\x1a\x42\x8c\xd0\x74\x2a\x3d\x82\x24\xa1\xe3\x96\xd3\x44\x6b\xd6\xaf\xd5\x1a\x03\x07\x61\x97\x84\xd9\xc0\x5a\x19\xc9\x6d\x5b\x30\x57\x2a\xe2\x73\x3a\x35\xcc\x69\xbe\xea\xba\x66\x75\xac\xc6\x25\x25\x4c\x91\xb8\xc5\x88\x8d\x49\x91\xc9\x23\x03\x12\xd0\xa0\x65\x4e\x14\x18\x58\xa4\x50\x16\x43\x6b\xb2\x16\x32\x9a\xc9\xe0\x41\xa8\x17\x56\x32\x9b\x92\xa0\x8c\xf3\x4c\xc6\x5c\x0d\xb7\x14\x29\x1a\x31\x29\x4c\x40\x10\xdd\x1e\x99\x6c\x2d\x97\x41\x2b\x4b\x18\x9c\x1f\x91\xa8\xe1\xe3\xcb\x21\xe0\x52\xa8\xed\x3e\x6c\x68\xe1\xd1\x32\x8b\xec\xc3\x00\x10\x1e\x56\xe8\x7c\xaa\x8f\xd1\xd2\x3d\x1a\x20\x8e\xf0\xac\x1c\xc6\xc1\xf7\x70\xda\x48\xe1\x05\x0c\x62\xfc\x12\xa7\xdf\xd7\x80\x5f\xad\x68\x70\xbb\x5b\x9c\x86\xec\x38\x8e\xd2\x3f\x41\x26\xab\x2b\xa0\x75\x98\x61\xc2\x8b\x2f\xc5\xcf\x37\x57\xc5\xd7\x37\xbc\xb4\xe5\x27\xe3\x8f\x21\x6f\x3c\xa7\x27\xa1\xf5\x26\x24\xc9\xc1\x2b\xb8\x17\x7a\x62\x4c\xe3\x24\xcf\x18\xc3\x17\xc1\x33\xbe\x7b\xff\x7e\xac\xc7\x93\xeb\x3f\xe1\xfc\xd3\xdd\xdd\x75\x39\x59\x5d\xa7\x67\xd6\x62\x71\xfa\xbc\x39\x97\xbd\xf5\x92\x26\x5f\x2e\xf2\xdd\xff\x03\x00\x00\xff\xff\x93\xea\x9d\x6c\x36\x14\x00\x00")

func templatesCmdMainTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesCmdMainTemplate,
		"templates/cmd/main.template",
	)
}

func templatesCmdMainTemplate() (*asset, error) {
	bytes, err := templatesCmdMainTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cmd/main.template", size: 5174, mode: os.FileMode(420), modTime: time.Unix(1489626279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConnectionCacheTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x93\x4d\x6f\xdc\x36\x10\x86\xcf\xe2\xaf\x78\xbb\x87\x42\x32\x14\x2d\xd0\x63\x8a\x3d\x25\x40\x11\x34\x8d\x7b\x48\x4f\x81\x0f\x5c\x6a\x24\x11\xa2\x86\x32\x39\xb4\xaa\x1a\xfe\xef\x05\xa5\xb5\xbd\x36\xda\x1b\xc5\x8f\x87\xcf\xbc\x1c\xcd\xda\x8c\xba\x27\x18\xcf\x4c\x46\xac\x67\xa5\xec\x34\xfb\x20\x28\x15\x00\x1c\xba\x49\x0e\xfb\x28\xae\x6c\x0e\x6a\x1b\xcf\xce\xf7\x38\xf4\x56\x86\x74\x6e\x8c\x9f\x8e\xa3\x9f\x34\xb7\xc7\xd9\xa5\xde\xf2\x87\xd8\x8e\x1f\x7a\xff\xcb\xd1\xf9\xfe\xa0\x2a\xa5\x8e\x47\x7c\xd2\x66\x20\xd8\x08\x8d\x68\xa7\xd9\x11\x96\xa0\xe7\x99\x02\x74\xf0\x89\x5b\x68\x4c\x7a\xc6\x62\x65\xc8\xc3\x24\xf4\x77\x0d\xf1\x88\xe2\xc3\xb5\x5e\x84\x65\x25\xeb\x4c\x17\x62\x94\x90\x8c\xe0\x71\xd3\xca\x86\xcd\x1f\xf9\xec\xf6\xd9\x6a\xd9\xa8\x3f\xa2\x04\xcb\xfd\xdd\xcd\xa7\xd7\x2a\x9f\x94\xea\x12\x1b\x7c\xa3\x65\x03\x95\x15\x6e\x76\xe2\xa3\x2a\x02\x49\x0a\x8c\x9f\xb7\x89\x47\x55\x14\x99\xf4\x11\x93\x1e\xa9\xfc\x6f\x5e\x55\xab\xe2\x29\x43\x8f\x47\xfc\x46\x82\xc5\x3a\x87\x9e\x04\x3e\xc0\xb2\x15\xc8\xb0\x57\xd1\xe0\x8b\xe0\xec\xbc\x19\x23\x12\x8b\x75\x2f\x2b\x39\x9c\x40\xba\x5d\x33\xe3\xfb\xed\xe7\x5b\xc8\x60\xe3\x4e\x3a\x13\x1e\x28\xac\xb0\x4c\x5d\x67\x8d\x25\x16\x9c\x93\x60\x21\x30\x51\x0e\x6f\xd1\x6b\x8e\xcb\x79\x3f\xa6\xf9\x3a\xaf\x4c\xb3\x0c\x0d\x19\x32\x3d\xea\x8e\x30\x69\x66\x0a\x35\x34\xb7\xf0\xec\xd6\x4d\xd1\x6a\x67\xff\xa1\xac\x33\xc1\xb3\xa1\x66\x8f\xf3\x96\x0d\x61\xf1\xc9\xb5\xd9\xa2\xf7\xbe\xcd\xc4\xcb\xe5\x51\xb2\xdd\x45\x61\x76\xda\x50\x96\x30\x5b\x8e\x57\x0e\x75\xa6\xf2\x26\xb7\xf3\xd3\x8c\xf3\x0a\x8d\x91\xb6\x6a\x5f\x0b\x0d\x74\x9f\x6c\x20\xcc\x49\xc4\x72\x0f\x8d\xdf\x69\x2d\x2b\x4c\x24\x83\xcf\xb2\x2f\x71\xed\x68\x58\x16\x0a\x9d\x36\x54\x63\x19\xac\x19\x32\x6e\x79\x91\x12\x8f\xcb\x5b\x6a\xec\x8f\x06\x19\xb4\xe4\xa8\x8d\x9f\x66\x1f\xa9\x85\xef\xae\x79\x5b\xcf\xc4\x64\x86\x7d\xe3\x17\xc9\x40\xa3\x19\x89\xed\x7d\xa2\x9c\x55\x4b\x2c\xb6\x5b\xdf\x9b\x2c\x84\x45\xb3\x3c\xbf\x02\xd2\xdc\xec\x2d\x56\x9a\x4b\x6b\x55\xb9\x35\x4a\xd3\xe2\xaa\x71\x3e\x6b\xd1\x35\x1c\x6e\xf2\x2f\xd5\x7c\xf5\x7d\x4f\xa1\x42\x79\xb5\xa3\x06\x85\xe0\x43\x95\x1b\xf3\x41\x07\xc4\xeb\xe3\xfb\x94\x1f\x71\xf6\xde\xa9\xc2\x34\x5f\xbd\x19\xcb\x4a\x15\xb6\x43\xac\xf3\xc2\x09\xa6\xc9\x45\xfd\x30\x6d\xb3\x65\x79\xf7\x6b\x9e\xce\x5d\x6d\x9a\xbf\xd8\x5d\xf6\x3f\xf7\x7c\xac\xc1\xd6\xe5\x66\x2e\xba\x49\x9a\x3f\x83\x65\x71\x5c\x1e\xbe\xd1\x82\xd7\x6b\xf1\xdd\x4e\x74\xa8\x54\x11\x37\x3b\x7c\x3c\x3d\x2f\x96\xa6\xad\xe1\x76\x81\xbc\xf2\xd3\x29\xf3\xfe\xf7\x3a\xb6\x6e\x23\x6c\x17\xbe\x17\xc5\x09\x51\xbd\x39\xf6\x56\xf2\xe9\xdf\x00\x00\x00\xff\xff\xbf\x38\x75\xe0\xbe\x04\x00\x00")

func templatesConnectionCacheTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesConnectionCacheTemplate,
		"templates/connection/cache.template",
	)
}

func templatesConnectionCacheTemplate() (*asset, error) {
	bytes, err := templatesConnectionCacheTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/connection/cache.template", size: 1214, mode: os.FileMode(420), modTime: time.Unix(1489507685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConnectionConnectTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\x4d\x8b\xd4\x40\x10\x3d\x9b\x5f\xf1\xd8\x83\xcc\x2c\xd9\x0d\x78\x14\x3c\x29\x82\xb0\xba\x17\x11\x16\xf1\x50\xdb\x5d\x49\xda\xe9\xe9\x0e\xd5\xd5\x0e\x71\xd8\xff\x2e\xdd\x99\xec\xcc\x2a\xde\x92\xca\xcb\xab\xf7\x51\x13\x99\x1d\x0d\x0c\x13\x43\x60\xa3\x2e\x86\xa6\x71\xfb\x29\x8a\x62\xd3\x00\xc0\xe4\xe3\x80\xab\xc1\xe9\x98\x1f\x6f\x4d\xdc\x77\xbb\xb8\xa7\x60\xbb\xc9\xe7\xc1\x85\x9b\x64\x77\x37\x43\x7c\xd3\xf9\x38\x5c\x35\xdb\xa6\xe9\x3a\xbc\x5f\xa8\xe0\x12\x74\x64\x98\x9c\x34\xee\x61\xa2\x65\xf4\x51\xea\xcc\xf2\x2f\xf6\x71\x62\x81\x46\x1c\xc4\x29\x97\x87\x3e\x7b\x3f\xc3\x05\xa7\x8e\xbc\xfb\xcd\xa0\x60\x21\xac\x59\x02\xa8\x30\x0b\x93\x9d\x0b\x32\x27\x5e\xd7\xb8\x18\x10\x1f\x7f\xb2\xd1\xdb\xa6\xcf\xc1\xac\xf3\x8d\xb1\xb8\x3e\x63\x3e\x90\x52\x8b\xe2\xe5\xba\x38\xba\xbd\x8b\xc3\xc0\xb2\xc5\xe6\x02\xd3\x82\x45\xa2\x6c\x71\xac\xce\x4b\x24\x78\xfb\x0e\xaf\xcf\x88\xe3\x53\xfd\xd2\x75\x78\x88\x59\x16\x4f\x23\x0b\xaf\xd3\xaf\xb4\xe3\xc5\xf4\x59\x9c\x25\xa5\xea\xa4\xfa\x70\x0a\x17\x34\x56\xd0\x3f\x0e\x9e\x69\x46\x0e\xed\xcb\x20\x66\x24\x25\xe5\x16\x29\x9b\x11\xb4\x44\x4b\x46\x33\x79\xd0\xe4\x2e\x17\x9e\xd8\x75\x74\x62\x31\x91\xe8\xbc\xf2\x7e\x74\x81\xbc\x9f\x5b\x4c\x94\x12\x1e\xc9\xec\xfe\x12\xdb\x22\x38\x5f\x5b\x4a\xd9\x18\x4e\x69\xfd\xf3\x5e\x47\x96\x83\x4b\x5c\x11\xa7\xa0\x2a\xb0\x27\xe7\xb3\x70\xb3\x22\x3f\x97\x08\x52\x96\xda\xe8\xfd\x97\xbb\x87\x5a\x56\x89\xfc\x53\xe8\x63\x0d\x62\x7d\xe9\x0b\xa4\x54\x52\xec\x5d\x9c\xc9\xc2\x75\x2a\xbe\x88\xab\x4b\x9b\xa7\x7a\x5d\xdf\xc8\x3b\x4b\xca\x38\x38\xef\xc1\x61\x59\xf5\x32\xcd\x03\x25\x18\x61\x52\xb6\x30\x51\x84\x8d\xfa\x79\xb9\x8e\x8d\xb9\xbc\x8a\xed\x33\xdd\x66\x8b\xef\x3f\x16\x57\xc7\xff\x74\xdc\xbc\x3a\x49\xaa\x62\xfe\x04\x00\x00\xff\xff\x24\x67\x6d\xdd\x39\x03\x00\x00")

func templatesConnectionConnectTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesConnectionConnectTemplate,
		"templates/connection/connect.template",
	)
}

func templatesConnectionConnectTemplate() (*asset, error) {
	bytes, err := templatesConnectionConnectTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/connection/connect.template", size: 825, mode: os.FileMode(420), modTime: time.Unix(1489507693, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConnectionConnectionTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x6b\xec\x46\x10\xbc\xef\xaf\x28\x1e\x86\x5c\xf4\xb4\x87\xdc\x1e\xe4\x60\xe2\x40\x4c\x4c\x30\x89\x21\xe4\xe6\xde\x99\x5e\x69\xbc\xa3\x69\x31\x1f\xab\x2c\x46\xff\x3d\xf4\x48\x6b\x2b\x36\xb9\xbd\xe3\xcc\xf4\x54\x57\x57\x55\x8f\x64\x4e\xd4\x31\x8c\x84\xc0\x26\x3b\x09\xbb\xdd\x7e\x8f\x9f\xdf\x8e\x70\x09\xb9\xdf\x16\x40\x0e\x2f\x6c\x32\x72\x4f\xb9\x3e\x59\x3e\xb3\x97\x91\x23\x26\xe7\x3d\xc8\x5a\x64\xc1\xd4\x73\x80\x0b\x99\xbb\x48\xd9\x85\x0e\x84\xdc\xbb\x68\x31\x52\xcc\x17\x6d\x72\xfb\x78\xdf\xe2\xd6\x5a\x50\xb8\xe0\xe4\x82\x85\x1c\xe1\x25\x74\xf0\xee\xcc\x16\x12\x61\x4a\xca\x32\xe0\xc7\xeb\xb7\xcf\x34\x92\xf6\x10\x85\x4e\x48\x39\x16\x93\x5b\xc5\xfe\x85\x4c\x0f\x17\x52\xa6\x60\x58\x71\x37\x05\xf8\xeb\xfe\xe1\x01\x07\x46\xea\x29\xb2\x45\xe7\xe5\x40\xde\x5f\x1a\x24\xa9\xd7\x25\xb2\x4e\xa0\x83\x0c\x25\xf3\x3f\x9c\x94\x0b\x65\x19\x9c\x51\x70\x9d\x95\x94\x43\xd2\x29\x23\x23\x30\x5b\xb6\x2d\xee\x4a\xfd\xd8\xcb\x84\xd1\x97\xce\x05\x74\x1c\xd6\x5a\x4c\x12\x4f\xa9\xa9\xc3\x9a\x9e\x42\xc7\x09\x57\xe2\x47\xe7\xb9\x8a\xa7\xe8\x63\xe4\xc4\x21\xfb\x8b\x72\xf1\x92\xf2\x22\xa5\x95\x45\xc4\xc8\x5f\x57\x50\x6e\x71\x7f\xc4\x45\x4a\xed\xaf\x60\x03\x9d\x58\x69\x3b\x6d\x48\x1e\xc7\x12\xaa\x56\xa9\x81\xcb\x3f\x24\x28\x7c\x64\x23\xc3\xc0\xc1\xb2\xad\x7f\x47\x4f\x86\xd5\xc7\x01\x2e\x80\xae\x92\x57\x4a\x2e\x24\x67\x57\xf9\xde\x22\x80\x35\x33\x0d\x48\xa3\x21\x69\xa1\x8e\x20\x59\xf1\x0f\x2a\x41\x31\x3d\x5b\x1c\x2e\xf5\xdf\x46\x83\x15\x69\x11\xa7\xc5\xaf\x32\xf1\x99\x63\x53\x89\x0c\x25\x65\xa4\x7c\x8d\x90\xea\x34\x46\x95\x3a\x3b\x4e\x0d\x52\x31\x7d\x1d\x80\x96\x40\x92\xc9\x85\x3c\x8c\x77\x1c\xf2\x26\x17\x0d\x3e\xc6\x21\x5f\x46\xde\x26\x7a\x4d\xc1\xeb\x0e\x00\x5e\x5f\xbf\x22\xaa\x1b\xb8\x09\x0d\x6e\x46\x7c\xfb\x09\xed\xa6\x78\x9e\x6b\xd9\x52\x8a\x9b\xb1\xfd\x9d\x06\xc6\x3c\xaf\xa7\x27\xc5\x9e\x67\x3c\xbf\x24\x09\xdf\xbe\x2c\x97\x7f\xd0\xb4\x56\x7d\x79\x7e\x6b\xc2\xc1\x2a\x58\x3d\xef\xf7\x78\x2c\xf9\x2a\xf5\xfb\x94\x38\xb0\x97\x69\x37\x7f\xd8\xc1\x3b\xca\x74\xdd\xc3\x95\x7c\x5d\xbe\x5e\xbc\x5d\x6e\x23\x4d\xdb\xd5\x18\x29\xd2\x90\x70\x8c\x32\xd4\x67\x17\x8c\x0c\x1a\x9f\x81\x53\xa2\x8e\x15\xfe\x49\x25\xaa\xc6\xa9\x63\x25\x06\xb6\xcb\x2a\x69\xc4\x54\xd8\x77\xb8\xd5\xc7\x3f\xef\x7e\x43\x2c\x21\xbb\x81\x5b\xfc\x2d\x05\xa9\x97\xe2\x2d\x82\x7a\x08\xeb\x22\x9b\xec\xeb\x66\x5f\xf3\x58\x12\x2f\x56\x2c\xbb\xda\x40\x82\x5f\xb0\x22\x77\xc5\x53\xdc\x74\x69\x71\x9b\xaa\xc9\x0d\xe8\x2c\xce\xd6\x1c\x6b\xe2\xff\x93\x03\x45\x75\x9f\x3d\xad\x0a\xfd\x9f\xaf\x1f\x3d\xfd\xde\x96\xce\xff\x06\x00\x00\xff\xff\x58\x5e\xfe\x5a\x45\x05\x00\x00")

func templatesConnectionConnectionTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesConnectionConnectionTemplate,
		"templates/connection/connection.template",
	)
}

func templatesConnectionConnectionTemplate() (*asset, error) {
	bytes, err := templatesConnectionConnectionTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/connection/connection.template", size: 1349, mode: os.FileMode(420), modTime: time.Unix(1489507503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConnectionConnection_keyTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xd0\x41\x4e\x03\x31\x0c\x05\xd0\x35\x73\x8a\xaf\xae\x5a\x54\x88\xe0\x0a\x54\x6c\x58\x74\xc3\x05\x4c\xe2\x74\xa2\x26\xce\x10\x3b\xb4\x15\xe2\xee\xa8\xad\x06\xba\xb5\xbf\x9f\xac\x3f\x91\xdf\xd3\x8e\xe1\xab\x08\x7b\x4b\x55\x86\xc1\x39\xbc\xf1\x09\xbe\x96\xa9\x25\x65\x05\xc9\x09\x31\x71\x0e\x0a\x61\x0e\x1c\x60\x15\x85\xf6\x8c\x3e\x81\xd0\x25\x7d\x76\xc6\x17\xe5\xce\x88\xb5\x81\xc9\x8f\x48\x2a\x46\xe2\x19\x35\x82\x6e\x7d\xe7\xf0\x7a\x0e\x1d\xa9\x4c\x99\xd7\x78\x46\x61\x55\xda\xb1\xe2\x90\x6c\x84\x8d\x0c\xa5\x72\xfd\x09\x13\x35\x2a\x0a\x1d\x6b\xcf\x01\x3a\x52\x63\x3c\xdd\x70\x6b\x90\x04\x1c\x52\xce\x67\xf8\xa3\xdb\xe5\x5e\xf8\x68\x33\x7b\x55\x43\x8a\x91\x1b\x8b\xcd\xe2\xe1\x02\x76\x65\xd0\xcd\xf2\x1f\x7e\x1c\x62\x17\x8f\xa5\xc7\xfd\xcb\xdf\x70\x43\x46\xab\x73\x3b\xcb\x15\xd4\x5a\x92\x1d\xbe\x07\x00\x70\x0e\xef\xdb\xcd\x16\xd4\xad\x3e\xcc\xcd\xa1\xc6\x38\xc7\xae\xfd\x0d\x77\x8d\xad\x37\xc1\x62\x31\xfc\xfc\x06\x00\x00\xff\xff\x18\x05\x06\xd8\x7c\x01\x00\x00")

func templatesConnectionConnection_keyTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesConnectionConnection_keyTemplate,
		"templates/connection/connection_key.template",
	)
}

func templatesConnectionConnection_keyTemplate() (*asset, error) {
	bytes, err := templatesConnectionConnection_keyTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/connection/connection_key.template", size: 380, mode: os.FileMode(420), modTime: time.Unix(1489507556, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServerHttpHandler_xTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\xdd\x8e\xdb\x46\x0f\xbd\xb6\x9e\x82\x9f\x80\xe4\x93\x03\x45\x46\x73\xe9\x22\x28\xf2\x87\x26\x40\xb3\x59\xec\x6e\x9b\x8b\xa2\x68\xc6\x23\x5a\x9a\x7a\x34\x54\x67\xa8\x55\x0d\xc3\xef\x5e\x70\x46\xb6\xb7\xad\x9b\x6e\x80\xf4\xc7\x57\xd2\x88\xe4\x39\xe4\x90\x87\xee\x95\xde\xa8\x06\xa1\x65\xee\xb3\xcc\x74\x3d\x79\x86\x22\x9b\xe5\xeb\x8e\xf3\x6c\x96\xa3\xd3\x54\x1b\xd7\x2c\x7e\x0a\xe4\xf2\x0c\x00\x20\x37\xb4\x30\x34\xb0\xb1\xd3\xbb\x43\x5e\x88\x7f\x9e\xa5\xf7\xdd\x0e\xaa\xcb\x14\xf7\x8a\x88\x61\xbf\x5f\x28\xcd\x86\x5c\xc8\xff\xd4\x40\x93\x73\x18\x8d\x92\x4d\x6f\xa9\x81\xbc\x31\xdc\x0e\xab\x4a\x53\xb7\xd8\x50\xa7\x5c\xbd\xe8\xed\xd0\x18\xf7\x38\xd4\x9b\xc7\x0d\x3d\x59\x58\x6a\xa6\x98\x7f\x69\xda\x61\x08\xaa\xc1\x3c\x9b\x67\xd9\x62\x01\xc2\xe1\x42\x75\x08\xfb\xfd\x6b\xe5\x6a\x8b\x1e\x4c\x00\x05\x6d\x7a\xc9\x78\xdb\xe3\x39\xa3\xc0\x7e\xd0\x0c\xbb\x6c\xa6\xe1\xd1\x89\x75\xf5\x42\xe9\x16\xb3\x7d\x8c\x7d\x81\xe3\x19\x4f\x8f\x3c\x78\x27\x18\x0e\xc7\x33\xa1\xb3\xf5\xe0\xf4\x79\xdf\xe2\x0c\xd6\x1c\x1e\x9d\x01\xd9\x65\xb3\x84\x03\x0f\x0f\x5f\x8f\x1f\x77\xd9\x6c\xa6\x97\xa0\xcb\x6c\xb6\x9f\x98\x5e\xa3\xbf\xc5\xd7\x37\x37\x97\x53\xde\x01\xb8\x45\xf0\xf8\xf3\x80\x81\x43\x62\x54\xb4\xe7\x90\xe6\x27\xdf\x62\x8c\xed\x53\x5d\x61\xe8\xc9\x05\x7c\xef\x0d\xa3\x2f\xc1\xc3\xa3\xe9\x3c\x86\x9b\x0b\xb9\x55\x09\xe8\x3d\x2c\x9f\x42\x6a\xa1\xea\x0a\x55\xfd\xcc\xda\xc2\x57\xcf\xa9\xde\xce\xb3\xd9\x62\x01\x37\xef\x5e\xbe\x83\x21\x20\x28\xb0\xa6\x33\x0c\x1e\x55\x8d\x1e\x98\xa0\xf7\x78\x8b\x4e\x4e\x02\x0d\x5e\x23\x28\x66\xa5\x37\xe1\xab\x93\x63\xaf\x42\x00\x4b\x4d\x23\x57\xea\x98\x0e\x57\x5a\xca\x21\xd0\xc0\xc2\x80\x7c\x80\x2d\x65\x33\xb3\x8e\x7c\xfe\xf7\x14\x9c\xb1\x42\x70\x36\x56\x91\xff\xeb\x08\x59\xc4\x04\xae\x59\xf1\x10\xde\x38\x46\xef\x94\x8d\x79\xfb\x57\x12\x63\x7e\xb2\x2f\xbe\xff\x61\xb5\x65\x2c\xd6\x1d\x57\xd7\xbd\x37\x8e\xd7\xc5\x87\x5d\x9e\x9a\xf0\xc7\x88\x98\x2f\xf3\x07\x21\xdf\x7f\x88\x25\x98\xcf\xc5\x39\xdd\x95\xdc\xc7\x2c\x15\xa0\x7a\x61\x29\x60\x31\x8f\xcc\x7c\xf5\x16\xb9\xa5\x5a\xe8\xe5\x97\xef\xae\x6f\xf2\x8f\x33\x4c\xd6\x17\xc4\xcf\xac\xa5\x11\xeb\xcf\x49\xaf\x93\x3b\x7b\x38\x0d\x51\xf5\xdd\x17\xbb\xfd\xb1\x78\xcb\xa7\x20\xea\x50\x7d\xeb\x3a\xe5\x43\xab\x6c\xb1\x2a\xa1\x9b\x7f\x79\xef\xca\x3e\x57\xf5\xa1\x47\x3e\x23\xe3\xc5\x02\x8e\x8c\x62\x5b\xaf\xa8\xde\xa6\x8e\x88\x4d\x6e\x9a\x96\xa7\x71\x8e\xc6\xef\x11\x34\x0d\xb6\x06\x75\x4b\xa6\x8e\x36\x4f\x00\x7f\xd1\x18\x42\xcc\x0f\x0e\xb1\xb4\xb2\x36\x80\x71\xd0\xa2\x47\x18\x0d\xb7\xd2\xa8\xc4\x40\x6b\x08\xa3\x61\xdd\x3e\xd6\x2a\x18\xd7\x00\x39\x10\x1d\x09\x31\xfe\x6a\x60\x71\xe2\xd6\x04\xd0\x2a\x60\x19\x21\x7a\xf4\x6b\xf2\x9d\x72\x1a\xa1\x51\xc6\x89\x0a\x39\x62\xe0\x56\x31\x34\x1e\x15\x97\xa0\x5c\x0d\x86\xff\x1f\xc0\x0a\x97\x06\x1d\x7a\xc5\xe4\x41\x53\x8d\x32\x14\x9d\x32\x8e\x95\x71\x11\x86\x09\x6a\x02\xc3\x09\x68\x54\xdb\xea\x34\x1a\x66\x0d\x23\x42\x18\x42\x8f\x7a\x32\x88\xa2\xb7\x22\x66\x8b\x0e\xf5\xa6\x84\xde\xd3\xda\x58\x94\x08\x82\x1b\x46\xd5\xc3\x4a\xe9\x0d\x4c\x75\x3b\x65\x88\xa0\xfa\xde\x93\xd2\x6d\x36\x33\xae\x1f\x38\xb6\xc8\x24\xf5\xd5\x1d\xc9\x78\x23\x1f\x3f\xda\x30\x5d\x6a\xfe\x68\x58\x42\x0c\xf6\x09\xfd\xf3\xf9\x27\x13\xa6\xdf\x9d\x76\xd2\x75\x4c\xef\xae\x0c\x1f\x1f\x5f\x2a\x56\xf7\xc9\xef\xe4\x51\x82\xae\xff\x6b\x19\x5a\x21\x2e\x8b\xb7\xba\xc0\xf1\x9b\x28\xa0\x45\x32\x94\xa4\x8f\xc2\xdd\x56\xba\xfa\x1a\xb9\xd0\x75\x09\x36\x7d\xff\xbd\x8a\x1e\x82\xff\xdd\xf9\x94\x70\x38\x94\x3f\x02\x77\x53\x2c\xc1\x56\xd7\xec\x8d\x6b\x8a\xf9\x99\x74\xe5\x31\x49\xc4\x2b\xa5\xdb\xc3\xc2\x03\x87\x58\x1f\x16\xf4\xb4\x41\x98\x40\xab\x9e\x07\x8f\x69\x04\x69\xe0\x7e\xe0\xd3\x48\x75\x74\x8b\x69\x92\x98\x40\x41\xd8\x3a\x5d\x5d\x12\xd9\x38\x3c\x8d\x57\x2b\x20\x87\xb0\xf6\xd4\xc9\xf4\x78\x04\x14\x40\x36\x5d\x9c\xdc\xa0\x6e\x51\x54\x42\x59\x4b\x7a\x5a\x62\x8e\x38\x7e\x53\x6e\x2b\xae\xb2\xfb\x44\x4b\x04\x63\x09\x2f\x29\xaa\x43\x43\xa0\xea\x78\x6c\xdc\x1d\x4c\xd1\x22\x59\x70\x83\xab\xd1\x07\x56\x2e\x9a\xb4\x34\x0a\xf6\x36\x46\x1f\xc9\x6f\x22\xb7\x78\x4a\xc7\x71\x17\x32\x88\x72\x93\x53\x60\xc1\x1e\x8d\xb5\xa0\x34\x0f\xca\xda\x2d\x74\x6a\x23\x2b\xb9\x36\xeb\x35\x7a\x14\xc1\x5a\xce\xe1\x8d\x14\x85\xbd\xd1\x9b\x2d\x18\xe3\xf5\xa4\x36\xad\xe2\x00\x63\xbb\xbd\x23\x32\xb1\x5c\x82\x2c\x09\xa4\xd7\x8b\x57\xd9\x2c\xe9\x85\x34\xd6\x19\xe5\x78\x16\x8f\x64\xb4\x52\xdd\x8f\x4d\x98\x6c\xab\xab\xc1\x15\xa9\x39\x4d\x92\x0e\x3b\xff\x37\x76\xfa\xfd\xfb\xf0\x37\x1b\xca\xac\x61\xfa\x3f\x34\x09\xc6\xdb\x49\x2e\x52\xb2\xff\xbc\x3e\xdc\x27\x8f\x3f\x64\xf1\x49\x20\xe7\x20\x4a\xc8\x53\xc2\xf9\xf2\x41\x10\xbc\x53\xc9\x4a\x59\xd0\xf2\xb4\x8a\xd5\xdb\xff\x1a\x00\x00\xff\xff\x5a\xda\xf5\x93\xaf\x0c\x00\x00")

func templatesServerHttpHandler_xTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesServerHttpHandler_xTemplate,
		"templates/server/http/handler_x.template",
	)
}

func templatesServerHttpHandler_xTemplate() (*asset, error) {
	bytes, err := templatesServerHttpHandler_xTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/server/http/handler_x.template", size: 3247, mode: os.FileMode(420), modTime: time.Unix(1489629397, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesServerHttpServerTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x52\xc1\x6e\x9b\x40\x14\x3c\xef\x7e\xc5\x08\x59\x15\x58\x14\xda\x1e\xad\xf4\x90\x36\x07\x5f\x92\x58\x8e\xa5\x9e\x37\xcb\xb3\x8d\x02\xbb\x74\xd9\xad\x89\xd0\xfe\x7b\xf5\xa0\xb5\xb9\x86\x1b\x6f\xde\xcc\xe8\xcd\x6c\xa7\xf4\x9b\x3a\x11\xce\xde\x77\x52\xd6\x6d\x67\x9d\x47\x2a\x45\x62\xc8\x97\x3c\x4c\xa4\x48\x7c\xdd\x52\x22\xa5\x48\xc6\x11\xc5\x6e\x66\xec\xad\xf5\x88\xb1\xd4\xd6\x18\xd2\xbe\xb6\x26\x91\x99\x94\x65\x89\x27\xba\xbc\x90\xfb\x43\x0e\x8e\x7c\x70\xa6\x87\x82\xa1\xcb\x64\x81\x7e\x42\xe4\x31\x18\x7d\x5b\x4c\x35\xd6\x37\x9d\xe2\xa7\xd2\x67\xca\x90\xae\x99\x51\xcc\x2b\x39\xc8\x39\xeb\x32\x8c\x52\x94\x25\x0e\xcf\x0f\xcf\x20\xa5\xcf\xe8\x9a\x70\xaa\x0d\x0c\x51\xc5\x46\xc1\xd4\xbf\x03\x61\x3a\xc3\x5b\xd0\xd0\xd9\x9e\x26\xca\x6b\xf0\xa8\x8d\x27\x67\x54\xd3\xbc\xe7\xd0\xca\x40\x35\x0d\x42\x4f\x50\xd0\xb6\x6d\xad\x99\x78\x52\xa8\xaa\x72\xd8\x7c\x47\xb2\xe1\x83\xb7\x87\xc3\xae\xd8\xb1\x60\x8c\xc9\xcd\xbd\x55\x6f\x04\x7f\xa6\x9e\xa0\xad\x39\xd6\xa7\xe0\xd4\x6b\x43\xe8\x6d\x4b\x67\x7b\x91\xc2\x91\xaa\x0e\x75\x4b\x36\x78\x16\xe3\x10\x8b\x17\xd2\xd6\x54\x58\xcf\x7f\x0f\xc1\x29\xbe\x38\xbd\xda\xec\x6f\x9c\x18\x33\x29\x2e\xae\xf6\xf4\x51\x91\x5f\x0b\x12\xab\x48\xd1\x86\x81\xd9\x53\x9e\xff\x53\x7f\x0c\x43\x9a\x49\x00\x28\x4b\x58\x43\x38\x5a\x37\x47\xaa\xa6\x1a\x26\x68\x1c\x3f\xc3\x29\x73\x22\xac\x4c\x8e\x55\xc7\x2a\xc5\xfd\x84\xf7\x88\x71\xda\x69\xc3\x50\x6c\x95\xa9\x1a\x4a\x93\x72\x1c\xb1\xea\x8a\xbd\xba\x3c\xa9\x96\x38\xb0\x9c\x6b\x9e\xa7\x3c\x8a\x71\x5e\x75\xa9\xce\xb2\xab\x05\x99\x8a\xd5\xa4\xe8\xd9\xe0\xd3\xa2\xf7\x51\x0a\x71\x5f\x55\x6e\x83\xdb\xc7\xf5\xe4\x52\x88\x7f\x4a\x57\xa8\x0d\x03\x8f\x17\x19\x4e\xd0\xa2\x07\x86\x97\xe9\x30\xbe\x8c\x98\xf1\x47\x35\x6c\x49\x55\xe4\x7e\xbc\x7b\xea\x37\xf8\x8a\xbb\x3b\x7c\xfb\x92\x4b\x11\xb9\x53\x7e\xd1\xe8\x73\x98\xba\x91\xf1\x6f\x00\x00\x00\xff\xff\x84\xcf\x4f\xec\x3e\x03\x00\x00")

func templatesServerHttpServerTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesServerHttpServerTemplate,
		"templates/server/http/server.template",
	)
}

func templatesServerHttpServerTemplate() (*asset, error) {
	bytes, err := templatesServerHttpServerTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/server/http/server.template", size: 830, mode: os.FileMode(420), modTime: time.Unix(1489440716, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTriggersTrigger_xTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xd1\x8e\xa3\x36\x14\x7d\x86\xaf\x38\x8d\xa6\x15\x59\x25\xa0\xf6\x31\xdd\x79\xeb\x4b\xa5\x6a\xba\x9a\xce\x07\xac\x83\x2f\xe0\x0d\xd8\xd4\x36\x4b\x53\xc4\xbf\x57\xc6\x86\x4c\x52\x32\x53\x55\xda\x3c\x99\x7b\x8f\xef\x3d\xe7\xdc\xeb\xb4\x2c\x3f\xb1\x92\x60\xb5\x28\x4b\xd2\x26\x8e\x45\xd3\x2a\x6d\x91\xc4\x00\xb0\xa9\x55\xb9\x99\x4e\xc3\xb0\x87\x28\x90\x3e\x11\x71\xf3\x22\x1a\xc2\x38\x7a\x88\x15\x0d\x5d\x30\x24\xb9\xcb\xf8\x54\x29\x6c\xd5\x1d\xd3\x5c\x35\xd9\x49\x35\x4c\xf2\xac\xad\xbb\x52\xc8\xbd\xe1\xa7\x7d\xa9\x7e\xca\xb8\x30\x2d\xb3\x79\x45\x7a\x13\xaf\xb4\x39\xb7\x64\x96\x3e\xc3\x80\xf4\x93\xa7\xfb\xac\x94\xc5\x38\x66\xd6\x01\xae\x7a\x8f\x63\xbc\x8d\xe3\x2c\x83\x43\x3f\xb1\x86\xc6\xf1\xc5\x4b\xfb\x55\xb6\x9d\x05\xa7\x42\x48\x32\xb0\x15\x41\x4c\x91\x42\xe9\xe9\x6b\xbe\x80\xe5\x46\xec\xca\xaf\xc4\x7d\x25\x63\x75\x97\x5b\x0c\x4b\x77\xcd\x64\x49\x78\x90\xd8\xe1\xa1\xc5\xe1\x11\xe9\x04\x0c\xf4\x87\x01\x0f\xed\x5c\x28\x7c\x39\x7d\xee\xeb\xf3\x17\xa3\xe4\x61\xe3\x83\xcf\xac\x0f\xa8\xcd\xe7\x5b\x57\xc7\x75\x69\xbf\x77\xf6\x56\x9b\xf2\xa1\x5b\x71\xef\x6a\x0b\xa5\xfe\x83\xb8\x80\xfc\x76\xf2\x2e\xa4\xc0\xe6\xfd\xbc\x47\xfb\x9a\xf0\x9f\x1d\x75\x84\xbc\x62\x12\x1f\xee\x49\x9c\x80\x97\xf5\x7b\x75\x4c\x7f\x59\x8e\x81\xd1\x13\xf5\x2b\x2d\x35\xd9\x4e\x4b\x03\x06\x49\x3d\x86\xe1\x36\xdf\x6a\xd5\x92\xae\xcf\x10\x52\x58\xc1\x6a\xf1\x37\x71\x30\xc9\xa1\x89\xf1\x33\xac\x82\xee\x64\x1a\x17\x9d\xcc\xd7\x3b\x24\x7c\x9d\xd5\x76\x4d\x55\x90\xee\x49\xe1\x87\x7f\x03\x7c\x7e\xb1\xe7\x80\x86\x9d\x28\x79\xdb\xa4\x1d\x7e\xdc\xee\x96\x7b\x17\x32\x07\x70\x1f\x9e\x67\xf6\x87\x9b\x60\x2f\xea\x1a\xa6\x3b\x36\xc2\x82\xdd\xdf\x2d\x25\xad\x0a\xef\xcf\x92\x96\xac\xf6\x84\x76\xe8\x2b\x91\x57\x2e\x23\x71\xec\x8a\x82\xb4\x41\x40\xd2\x5f\xaf\x91\xde\xb2\xc4\xae\xf1\xde\x4e\x54\x12\xe5\x8b\x17\x2c\xa7\x61\xdc\x06\x6f\x6c\xea\x17\xe3\xe3\x1e\x2a\x4d\x3e\xdc\x79\x46\xdb\x20\xe9\x99\x58\x90\xd4\xaa\x16\x4c\x42\x58\x6a\xa0\x8a\x62\x95\xbb\x55\x38\x12\x2a\x26\x39\xf1\xff\xc3\xda\x75\x4b\x56\x07\x1b\x5c\xbb\x1a\xef\xc7\x7d\xd0\x32\xdb\x6f\x55\xeb\xb9\xe6\xb5\x32\xf4\x86\xbb\x5e\x90\xa6\xaf\x24\xed\xb4\xb7\x5f\xd4\xd1\xa0\xd0\xaa\x01\xb9\x0b\x42\x96\xe9\x3b\xfe\x5a\xd5\x26\xb3\xa5\x53\xbb\x24\x90\x99\x9c\x7b\xe7\x2e\xd3\xd6\x49\xfd\x4d\x4d\x45\x48\x6b\x35\x6f\x6e\x31\x9d\x22\x77\x0c\x7f\x5e\x87\x47\xd8\xd4\x1b\xb3\xec\xa0\x28\xe6\xec\xe3\x23\xa4\xa8\x71\x59\x6b\xf7\xcb\x32\xbc\x54\xfe\xe9\x4b\xaa\xd1\x33\xe3\x29\xf2\x1d\x7a\x42\xa9\xac\x1b\x24\x35\xad\x3d\xef\x7d\x7c\xef\x1e\xe3\x0e\x46\xb9\xfc\x91\x89\xda\x95\x47\x2f\x6c\x05\xa9\x20\x8c\xe9\xc8\x5c\x75\x08\x13\x90\xa2\x5e\xc2\x63\x1c\x45\xa2\x70\x62\x3c\xe5\x57\x8f\xd6\x2f\xa3\xdf\xab\x9f\x27\xc4\x77\x33\xed\x28\x8a\x6a\x55\xa6\x9f\xb4\x90\xb6\x48\x36\xcf\x94\x93\xa0\xaf\xc4\x83\x29\x86\x24\x17\xb2\x9c\xff\xf8\xd0\x90\x31\xac\xa4\x03\xbe\x37\x9b\x9d\xc3\x6c\x5d\x85\xc0\x86\xb4\x8e\xa3\x68\x8c\xa3\x31\x1e\xff\x09\x00\x00\xff\xff\xb9\x8e\x06\xcb\xd2\x07\x00\x00")

func templatesTriggersTrigger_xTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesTriggersTrigger_xTemplate,
		"templates/triggers/trigger_x.template",
	)
}

func templatesTriggersTrigger_xTemplate() (*asset, error) {
	bytes, err := templatesTriggersTrigger_xTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/triggers/trigger_x.template", size: 2002, mode: os.FileMode(420), modTime: time.Unix(1489625534, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTriggersTrigger_x_runTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x93\xcf\x6b\xdb\x4e\x10\xc5\xef\xfb\x57\x3c\x72\xf8\x22\x05\x7f\xad\x9c\x03\x29\x84\x9c\x7a\x69\x4b\x08\x85\x52\x7a\xd8\x48\x63\x79\xf1\x6a\x46\xec\x8f\x14\x63\xf4\xbf\x97\x5d\xad\x5c\x37\x71\xd2\x43\x0f\x85\xfa\x60\xa4\x9d\xd9\x7d\x4f\x9f\x37\x3b\xea\x76\xa7\x7b\x42\x70\xa6\xef\xc9\x79\xa5\xcc\x30\x8a\x0b\xa8\x14\x00\x5c\x1c\x0e\x58\x7f\x9a\x7b\xee\x45\x02\xa6\xa9\x69\x85\x99\xda\x60\x84\x2f\x54\xad\x54\xd3\xe0\xb3\xb6\xa6\xd3\x81\xf0\xdd\x58\x8b\xa7\xe5\x2d\x6c\x09\x86\xc7\x18\x60\x3c\x46\x27\x23\x39\xbb\x87\xa7\x10\xc7\xb5\xda\x44\x6e\x51\x19\x5c\x26\x85\x0f\x7a\x20\x4c\xd3\xc3\x6c\xe2\x7d\xda\x53\x1f\x4f\xad\x6a\x7c\xfd\x46\xce\x89\xc3\x21\x9b\xca\xcf\x1e\xd7\x37\x18\xf4\x8e\xaa\x52\x5c\xe1\xaa\xce\xe5\xfc\xd7\x34\xb8\x8b\x3e\xc8\xb0\xd8\x31\xc2\x68\xa5\x23\x6c\xc9\xd1\xd2\x72\x3b\x8e\xc4\xdd\x72\xa0\xf6\x60\xa2\x8e\x3a\xb5\xd4\x1d\x85\xe8\x38\xbf\x99\x0d\x2c\x71\x35\xb7\xd6\x78\x87\xab\xe2\x26\xfd\xe6\xbe\x72\x4e\x5e\x9d\xd4\xc9\x3a\x1b\xab\xa6\xdf\x91\x92\x18\xde\x44\x25\xe7\x50\x7d\xcc\x9b\xfe\x4d\x56\xf7\x91\xe1\x22\xfb\x4c\xa7\xcc\x27\x34\x77\x78\xb4\xd2\xee\x3c\x22\x07\x63\x7f\x29\x8e\x62\xad\xe1\x3e\x31\x6c\x65\x18\x2d\x05\x82\xb8\x45\x6a\xc6\x18\xce\x61\xac\x93\x58\x95\x06\x1b\x97\x3f\xc7\x7b\x7d\x77\x7c\x5c\x95\x41\x3e\xee\x7d\x3e\xac\xa7\xcc\x9b\x06\xa5\xe8\xd1\x09\x58\x02\xb6\xfa\x69\x4e\xd9\x27\x5d\x2b\x7d\x9f\x7c\xb6\xc2\x2d\x39\x4e\x30\x6f\xb3\x8c\xc7\xff\xd8\x4b\xc4\xa0\xf7\xa9\x09\xd1\xa7\x36\x1f\x34\x77\xda\x75\xd8\x0c\x21\x03\x48\xa5\x72\x71\x67\x82\x9b\xa3\x76\xd1\xff\x22\xd1\x3d\x8b\x70\x52\xe7\x31\x3f\x90\x0f\x2f\x38\xaf\xf0\x18\x03\x3a\x21\x9f\xed\x67\xe2\x59\x5a\xd8\xee\x5f\xa6\xb2\x80\x17\x26\x04\x33\xd0\xdb\xac\x93\xe2\x1f\xc1\xae\x5e\xbd\x09\xab\x39\x88\xfa\xaf\x25\x51\x6e\xf1\xf5\x0d\xfe\x7b\xcd\xe3\x61\x52\xe7\x53\x3a\xcd\x47\xca\xe7\xe4\x9c\x7e\x04\x00\x00\xff\xff\xa2\x00\xd3\xf1\xa5\x05\x00\x00")

func templatesTriggersTrigger_x_runTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesTriggersTrigger_x_runTemplate,
		"templates/triggers/trigger_x_run.template",
	)
}

func templatesTriggersTrigger_x_runTemplate() (*asset, error) {
	bytes, err := templatesTriggersTrigger_x_runTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/triggers/trigger_x_run.template", size: 1445, mode: os.FileMode(420), modTime: time.Unix(1489614092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypesType_xTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8c\x41\x0e\x82\x30\x10\x45\xf7\x3d\xc5\x0f\x61\xa9\xb0\x27\x71\xeb\xd2\x85\xf1\x00\x4c\xca\x80\xa8\xb4\x4d\xa7\xc4\x98\x66\xee\x6e\x04\x42\x5c\xce\xfc\xf7\x5e\x20\xfb\xa4\x81\x91\x3e\x81\xc5\x98\xba\x46\xce\xa8\x2e\x34\x31\x54\x31\x0a\x08\x76\x96\xe4\xa7\x85\xc0\xc0\x8e\x23\x25\xee\xe0\xfb\x1e\xbe\x47\xba\x33\x24\xb0\x35\xcb\xfc\xef\x4a\x8a\xb3\x4d\xc8\x06\x00\x72\x3e\x22\x92\x1b\x18\xa5\x3b\xa0\x0c\x68\x4e\xa8\xce\x23\xbf\x3a\x51\xdd\x08\x94\x61\x97\xd7\xeb\xf6\x6b\xaa\xa2\x7d\x88\x77\x4d\xb1\x3e\xaf\xf4\xde\xa8\xa2\xdd\xdb\xec\x3a\xa8\x1a\xfd\x06\x00\x00\xff\xff\xc6\x55\xb7\x65\xcf\x00\x00\x00")

func templatesTypesType_xTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypesType_xTemplate,
		"templates/types/type_x.template",
	)
}

func templatesTypesType_xTemplate() (*asset, error) {
	bytes, err := templatesTypesType_xTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types/type_x.template", size: 207, mode: os.FileMode(420), modTime: time.Unix(1488823232, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypesTypesTemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\xa9\x2c\x48\x2d\x06\x04\x00\x00\xff\xff\xc3\x31\x40\x36\x0d\x00\x00\x00")

func templatesTypesTypesTemplateBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypesTypesTemplate,
		"templates/types/types.template",
	)
}

func templatesTypesTypesTemplate() (*asset, error) {
	bytes, err := templatesTypesTypesTemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types/types.template", size: 13, mode: os.FileMode(420), modTime: time.Unix(1489543157, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVendorGitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templatesVendorGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_templatesVendorGitkeep,
		"templates/vendor/.gitkeep",
	)
}

func templatesVendorGitkeep() (*asset, error) {
	bytes, err := templatesVendorGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vendor/.gitkeep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1488419629, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/Dockerfile.template": templatesDockerfileTemplate,
	"templates/Makefile.template": templatesMakefileTemplate,
	"templates/actions/action_x.template": templatesActionsAction_xTemplate,
	"templates/actions/action_x_run.template": templatesActionsAction_x_runTemplate,
	"templates/cmd/main.template": templatesCmdMainTemplate,
	"templates/connection/cache.template": templatesConnectionCacheTemplate,
	"templates/connection/connect.template": templatesConnectionConnectTemplate,
	"templates/connection/connection.template": templatesConnectionConnectionTemplate,
	"templates/connection/connection_key.template": templatesConnectionConnection_keyTemplate,
	"templates/server/http/handler_x.template": templatesServerHttpHandler_xTemplate,
	"templates/server/http/server.template": templatesServerHttpServerTemplate,
	"templates/triggers/trigger_x.template": templatesTriggersTrigger_xTemplate,
	"templates/triggers/trigger_x_run.template": templatesTriggersTrigger_x_runTemplate,
	"templates/types/type_x.template": templatesTypesType_xTemplate,
	"templates/types/types.template": templatesTypesTypesTemplate,
	"templates/vendor/.gitkeep": templatesVendorGitkeep,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"Dockerfile.template": &bintree{templatesDockerfileTemplate, map[string]*bintree{}},
		"Makefile.template": &bintree{templatesMakefileTemplate, map[string]*bintree{}},
		"actions": &bintree{nil, map[string]*bintree{
			"action_x.template": &bintree{templatesActionsAction_xTemplate, map[string]*bintree{}},
			"action_x_run.template": &bintree{templatesActionsAction_x_runTemplate, map[string]*bintree{}},
		}},
		"cmd": &bintree{nil, map[string]*bintree{
			"main.template": &bintree{templatesCmdMainTemplate, map[string]*bintree{}},
		}},
		"connection": &bintree{nil, map[string]*bintree{
			"cache.template": &bintree{templatesConnectionCacheTemplate, map[string]*bintree{}},
			"connect.template": &bintree{templatesConnectionConnectTemplate, map[string]*bintree{}},
			"connection.template": &bintree{templatesConnectionConnectionTemplate, map[string]*bintree{}},
			"connection_key.template": &bintree{templatesConnectionConnection_keyTemplate, map[string]*bintree{}},
		}},
		"server": &bintree{nil, map[string]*bintree{
			"http": &bintree{nil, map[string]*bintree{
				"handler_x.template": &bintree{templatesServerHttpHandler_xTemplate, map[string]*bintree{}},
				"server.template": &bintree{templatesServerHttpServerTemplate, map[string]*bintree{}},
			}},
		}},
		"triggers": &bintree{nil, map[string]*bintree{
			"trigger_x.template": &bintree{templatesTriggersTrigger_xTemplate, map[string]*bintree{}},
			"trigger_x_run.template": &bintree{templatesTriggersTrigger_x_runTemplate, map[string]*bintree{}},
		}},
		"types": &bintree{nil, map[string]*bintree{
			"type_x.template": &bintree{templatesTypesType_xTemplate, map[string]*bintree{}},
			"types.template": &bintree{templatesTypesTypesTemplate, map[string]*bintree{}},
		}},
		"vendor": &bintree{nil, map[string]*bintree{
			".gitkeep": &bintree{templatesVendorGitkeep, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

