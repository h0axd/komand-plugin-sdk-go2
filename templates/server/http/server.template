package http

// DO NOT MAKE CHANGES TO THIS FILE, THEY WILL BE LOST IF YOU REGENERATE THE PLUGIN

import (
	"net/http"
	"time"

	"{{ .PackageRoot }}/connection"
)

// NewServer returns a new http server
func NewServer(c *connection.Cache) (*http.Server, error) {
	// TODO each plugin needs a unique port to expose
	// but internally, can all use a common port
	addr := ":{{ .HTTP.Port }}"
	// TODO make these configurable somehow
	readTimeout := time.Second * time.Duration({{ .HTTP.ReadTimeout}})
	writeTimeout := time.Second * time.Duration({{ .HTTP.WriteTimeout}})

	mux := http.NewServeMux()
    // one for each action
    {{- range $n, $p := .Actions }}
    mux.Handle("/actions/{{ $p.RawName }}", New{{ $p.Name}}Handler(c))
    {{- end }}

	s := &http.Server{
		Addr:           addr,
		Handler:        mux,
		ReadTimeout:    readTimeout,
		WriteTimeout:   writeTimeout,
		MaxHeaderBytes: 1 << 20,
	}
	return s, nil
}

// Light wrapper around returning an error with the response object over http
func replyWithError(response message.Response, w http.ResponseWriter, err error) {
	response.Error = err.Error()
	response.Status = "error"
	b, _ := json.Marshal(response) // There is nothing we can do if this fails?
	w.Write(b)
}