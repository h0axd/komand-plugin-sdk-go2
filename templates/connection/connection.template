package connection

// Code generated by the Komand Go SDK Generator. DO NOT EDIT

{{- if .ConnectionRequiresCustomTypes }}
import (
    plog "github.com/rapid7/komand-plugin-sdk-go2/log"
	"{{ .PackageRoot }}/types"
)
{{- end }}

// Connection is the connection object that the developer will add to when integrating a third party
// API. Add any kind of long lived or custom 3rd party connection objects into this struct.
// Each instance of this struct WILL be shared globally, so be sure to add mutexes or atomic
// operations where needed.
type Connection struct {
    CustomParams
    {{- range $n, $p := .Connection }}
        {{ $p.Name }} {{ $p.Type }} `json:"{{ $p.RawName }}"`
    {{- end }}
}

// Data is the struct that holds the raw connection params from the incoming message
// This will be turned into a real connection by the SDK runtime. You should never directly
// need to use this object, only the regular connection. As such, avoid adding any properties to it.
type Data struct {
    ConnectionCacheKey string `json:"connection_cache_key"`
    {{- range $p := .Connection}}
        {{ $p.Name }} {{ $p.Type }} `json:"{{ $p.RawName }}"`
    {{- end }}
}

// CallConnectionTest calls a connection test via reflection. Older Go plugins will not contain this function,
// therefore reflection is used to avoid compiler errors
func CallConnectionTest(conn *Connection, logger plog.Logger) error {
	method := reflect.ValueOf(conn).MethodByName("Test")

	params := make([]reflect.Value, 0)
	params = append(params, reflect.ValueOf(logger))

	rError := method.Call(params)

	// Ensure that a) we have data to work with and b) whether or not we need to process an error
	if len(rError) < 1 || rError[0].Interface() == nil {
		return nil
	}

	err := rError[0].Interface().(error)
	return err
}